@mixin entry($type, $fc: $selected_bg_color, $edge: none) {
  //
  // Entries drawing function
  //
  // $t: entry type
  // $fc: focus color
  // $edge: set to none to not draw the bottom edge or specify a color to not
  //        use the default one
  //
  // possible $t values:
  // normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
  //

  $_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
  $_entry_edge: if($edge == none, none, _widget_edge($edge));

  @if $type == normal {
    color: $text_color;
    border-color: $borders_color;
    background-color: $base_color;

    @include _shadows(entry_focus_shadow(transparentize($fc, 1)), $_entry_edge);

    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }

  @if $type == focus {
    @include _shadows(entry_focus_shadow($fc), $_entry_edge);

    border-color: entry_focus_border($fc);
  }

  @if $type == insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_entry_edge;
  }

  @if $type == backdrop {
    color: $backdrop_text_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_base_color;
    box-shadow: $_blank_edge;
  }

  @if $type == backdrop-insensitive {
    color: $backdrop_insensitive_color;
    border-color: $backdrop_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: $_blank_edge;
  }

  @if $type == osd {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }

  @if $type == osd-focus {
    color: $osd_text_color;
    border-color: $selected_bg_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: entry_focus_shadow($fc);
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
  }

  @if $type == osd-insensitive {
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: $osd_insensitive_bg_color;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }

  @if $type == osd-backdrop {
    color: $osd_text_color;
    border-color: $osd_borders_color;
    background-color: transparentize(opacify($osd_borders_color, 1), 0.5);
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// buttons

@mixin button($type, $_bg_color: $bg_color, $_fg_color: $fg_color, $edge: none) {
  //
  // Button drawing function
  //
  // $t:    button type,
  // $_bg_color:    base button color for colored* types
  // $_fg_color:   optional text color for colored* types
  // $edge: set to none to not draw the bottom edge or specify a color to not
  //        use the default one
  //
  // possible $t values:
  // normal, hover, active, insensitive, insensitive-active,
  // backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
  // osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
  //
  // This mixin sets the $button_fill global variable which containts the button background-image
  //
  $_hilight_color: _button_hilight_color($_bg_color);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge, 1)));

  @if $type == normal {
    //
    // normal button
    //
    color: $_fg_color;
    outline-color: transparentize($_fg_color, 0.7);
    border-color: if($_bg_color != $bg_color, _border_color($_bg_color), $borders_color);
    border-bottom-color: if($_bg_color != $bg_color, _border_color($_bg_color, true), $alt_borders_color);

    $button_fill: linear-gradient(to bottom, lighten($_bg_color, 5%), $_bg_color 50%, darken($_bg_color, 10%)) !global;

    background-image: $button_fill;

    //@include _button_text_shadow($_fg_color, $_bg_color);
    @include _shadows(inset 0 1px $_hilight_color, $_button_edge);
  }
  @else if $type == hover {
    //
    // hovered button
    //
    color: $_fg_color;
    outline-color: transparentize($_fg_color, 0.7);
    border-color: if($_bg_color != $bg_color, _border_color($_bg_color), $borders_color);
    border-bottom-color: if($_bg_color != $bg_color, _border_color($_bg_color, true), $alt_borders_color);

    @if $variant == "light" {
      $button_fill: linear-gradient(to bottom, lighten($_bg_color, 6%), $_bg_color 60%, darken($_bg_color, 4%)) !global;

      //@include _button_text_shadow($_fg_color, lighten($_bg_color, 6%));
      @include _shadows(inset 0 1px _button_hilight_color(lighten($_bg_color, 6%)), $_button_edge);
    }
    @else {
      $button_fill: linear-gradient(to bottom, lighten($_bg_color, 1%), darken($_bg_color, 2%) 60%, darken($_bg_color, 4%)) !global;

      //@include _button_text_shadow($_fg_color, lighten($_bg_color, 6%));
      @include _shadows(inset 0 1px _button_hilight_color(darken($_bg_color, 2%)), $_button_edge);
    }

    background-image: $button_fill;
  }

  @if $type == normal-alt {
    //
    // normal button alternative look
    //
    color: $_fg_color;
    outline-color: transparentize($_fg_color, 0.7);
    border-color: if($_bg_color != $bg_color, _border_color($_bg_color, true), $alt_borders_color);

    //@include _button_text_shadow($_fg_color, $_bg_color);

    @if $variant == "light" {
      background-image: linear-gradient(to bottom, lighten($_bg_color, 5%) 20%, $_bg_color 90%);

      @include _shadows(inset 0 1px _button_hilight_color(lighten($_bg_color, 6%)), inset 0 -1px lighten($_bg_color, 2%), inset 0 -1px darken($_bg_color, 12%), $_button_edge);
    }
    @else {
      background-image: linear-gradient(to bottom, darken($_bg_color, 3%) 20%, darken($_bg_color, 6%) 90%);

      @include _shadows(inset 0 1px $_hilight_color, inset 0 -1px darken($_bg_color, 4%), inset 0 -1px darken($_bg_color, 9%), $_button_edge);
    }
  }
  @else if $type == hover-alt {
    //
    // hovered button alternative look
    //
    color: $_fg_color;
    outline-color: transparentize($_fg_color, 0.7);
    border-color: if($_bg_color != $bg_color, _border_color($_bg_color, true), $alt_borders_color);

    @if $variant == "light" {
      $button_fill: linear-gradient(to bottom, lighten($_bg_color, 9%) 10%, lighten($_bg_color, 4%) 90%) !global;

      @include _shadows(inset 0 1px _button_hilight_color(lighten($_bg_color, 6%)), inset 0 -1px lighten($_bg_color, 5%), inset 0 -1px darken($_bg_color, 10%), $_button_edge);
    }
    @else {
      $button_fill: linear-gradient(to bottom, $_bg_color 20%, darken($_bg_color, 4%) 90%) !global;

      @include _shadows(inset 0 1px $_hilight_color, inset 0 -1px darken($_bg_color, 3%), inset 0 -1px darken($_bg_color, 6%), $_button_edge);
    }

    background-image: $button_fill;
  }
  @else if $type == active {
    //
    // pushed button
    //
    color: $_fg_color;
    outline-color: transparentize($_fg_color, 0.7);
    border-color: if($_bg_color != $bg_color, _border_color($_bg_color), $borders_color);

    $button_fill: image(darken($_bg_color, 6%)) !global;

    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize($_hilight_color, 1), $_button_edge);

    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @else if $type == insensitive {
    //
    // insensitive button
    //
    $_bg: if($_bg_color != $bg_color, mix($_bg_color, $base_color, 85%), $insensitive_bg_color);

    label, & {
      color: if($_fg_color != $fg_color, mix($_fg_color, $_bg, 50%), $insensitive_fg_color);
    }

    border-color: if($_bg_color != $bg_color, _border_color($_bg_color), $insensitive_borders_color);

    $button_fill: image($_bg) !global;

    background-image: $button_fill;
    text-shadow: none;
    -gtk-icon-shadow: none;

    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1), $_button_edge);
  }
  @else if $type == insensitive-active {
    //
    // insensitive pushed button
    //
    $_bg: if($variant == "light", darken(mix($_bg_color, $base_color, 85%), 8%), darken(mix($_bg_color, $base_color, 85%), 6%));
    $_bc: if($_bg_color != $bg_color, _border_color($_bg_color), $insensitive_borders_color);

    label, & {
      color: if($_bg_color != $bg_color, mix($_fg_color, $_bg, 60%), $insensitive_fg_color);
    }

    border-color: $_bc;

    $button_fill: image($_bg) !global;

    background-image: $button_fill;

    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1), $_button_edge);
  }
  @else if $type == backdrop {
    //
    // backdrop button
    //
    $_bg: if($_bg_color != $bg_color, $_bg_color, $backdrop_bg_color);
    $_bc: if($variant == "light", $_bg_color, _border_color($_bg_color));

    label, & {
      color: if($_fg_color != $fg_color, mix($_fg_color, $_bg, 80%), $backdrop_fg_color);
    }

    border-color: if($_bg_color != $bg_color, $_bc, $backdrop_borders_color);

    $button_fill: image($_bg) !global;

    background-image: $button_fill;
    text-shadow: none;
    -gtk-icon-shadow: none;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }
  @else if $type == backdrop-active {
    //
    // backdrop pushed button
    //
    $_bg: if($variant == "light", darken(mix($_bg_color, $base_color, 85%), 8%), darken(mix($_bg_color, $base_color, 85%), 4%));
    $_bc: if($variant == "light", $_bg, _border_color($_bg_color));

    label, & {
      color: if($_fg_color != $fg_color, mix($_fg_color, $_bg, 80%), $backdrop_fg_color);
    }

    border-color: if($_bg_color != $bg_color, $_bc, $backdrop_borders_color);

    $button_fill: image($_bg) !global;

    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }
  @else if $type == backdrop-insensitive {
    //
    // backdrop insensitive button
    //

    $_bg: if($_bg_color != $bg_color, mix($_bg_color, $base_color, 85%), $insensitive_bg_color);
    $_bc: if($variant == "light", $_bg, _border_color($_bg_color));

    label, & {
      color: if($_bg_color != $bg_color, mix($_fg_color, $_bg, 35%), $backdrop_insensitive_color);
    }

    border-color: if($_bg_color != $bg_color, $_bc, $backdrop_borders_color);

    $button_fill: image($_bg) !global;

    background-image: $button_fill;
    text-shadow: none;
    -gtk-icon-shadow: none;

    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }
  @else if $type == backdrop-insensitive-active {
    //
    // backdrop insensitive pushed button
    //

    $_bg: if($variant == "light", darken(mix($_bg_color, $base_color, 85%), 8%), darken(mix($_bg_color, $base_color, 85%), 4%));
    $_bc: if($variant == "light", $_bg, _border_color($_bg_color));

    label {
      color: if($_bg_color != $bg_color, mix($_fg_color, $_bg, 35%), $backdrop_insensitive_color);
    }

    border-color: if($_bg_color != $bg_color, $_bc, $backdrop_borders_color);

    $button_fill: image($_bg) !global;

    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);
  }
  @else if $type == osd {
    //
    // normal osd button
    //
    $_bg: if($_bg_color != $bg_color, transparentize($_bg_color, 0.5), $osd_bg_color);

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;

    $button_fill: image($_bg) !global;

    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $type == osd-hover {
    //
    // active osd button
    //
    $_bg: if($_bg_color != $bg_color, transparentize($_bg_color, 0.3), lighten($osd_bg_color, 12%));

    color: white;
    border-color: $osd_borders_color;
    background-color: transparent;

    $button_fill: image($_bg) !global;

    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: inset 0 1px transparentize(white, 0.9);
    text-shadow: 0 1px black;
    -gtk-icon-shadow: 0 1px black;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $type == osd-active {
    //
    // active osd button
    //
    $_bg: if($_bg_color != $bg_color, $_bg_color, $osd_borders_color);

    color: white;
    border-color: $osd_borders_color;
    background-color: transparent;

    $button_fill: image($_bg) !global;

    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
    outline-color: transparentize($osd_fg_color, 0.7);
  }
  @else if $type == osd-insensitive {
    //
    // insensitive osd button
    //
    color: $osd_insensitive_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;

    $button_fill: image($osd_insensitive_bg_color) !global;

    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @else if $type == osd-backdrop {
    //
    // backdrop osd button
    //
    $_bg: if($_bg_color != $bg_color, transparentize($_bg_color, 0.5), $osd_bg_color);

    color: $osd_fg_color;
    border-color: $osd_borders_color;
    background-color: transparent;

    $button_fill: image($_bg) !global;

    background-image: $button_fill;
    background-clip: padding-box;
    box-shadow: none;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
  @else if $type == undecorated {
    //
    // reset
    //
    border-color: transparent;
    background-color: transparent;

    $button_fill: none !global;

    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);

    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

@mixin headerbar_fill($start: $headerbar_start_fill, $end: $headerbar_end_fill) {
  $gradient: linear-gradient(to bottom, $start, $end);

  background: $gradient;
  border-bottom: 1px solid $headerbar_border_color;
}

@mixin overshoot($position, $type: normal, $_bg_color: $fg_color) {
  //
  // overshoot
  //
  // $position: position
  // $t: type
  // $_bg_color: base color
  //
  // possible $position values:
  // top, bottom, right, left
  //
  // possible $t values:
  // normal, backdrop
  //

  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $position == right or $position == left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $_bg_color;
  $_big_gradient_color: transparentize($_bg_color, 0.93);

  @if $_bg_color == $fg_color {
    $_small_gradient_color: darken($borders_color, 10%);
    $_big_gradient_color: transparentize($fg_color, 0.93);

    @if $type == backdrop {
      $_small_gradient_color: $backdrop_borders_color;
    }
  }

  $_small_gradient: radial-gradient(farthest-side at $position, $_small_gradient_color 85%, transparentize($_small_gradient_color, 1));

  $_big_gradient: radial-gradient(farthest-side at $position, $_big_gradient_color, transparentize($_big_gradient_color, 1));

  @if $type == normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  }
  @else if $type == backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $position;
  background-color: transparent;

  // reset some properties to be sure to not inherit them somehow
  border: none;

  //
  box-shadow: none;

  //
}

@mixin undershoot($position) {
  //
  // undershoot
  //
  // $position: position
  //
  // possible $position values:
  // top, bottom, right, left
  //

  $_undershoot_color_dark: transparentize(black, 0.8);
  $_undershoot_color_light: transparentize(white, 0.8);

  $_gradient_dir: left;
  $_dash_bg_size: 10px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $position;

  background-color: transparent;

  // shouldn't be needed, but better to be sure;

  @if $position == left or $position == right {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $position center;
  }

  background-image: linear-gradient(to $_gradient_dir, $_undershoot_color_light 50%, $_undershoot_color_dark 50%);
  padding-#{$position}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;
  box-shadow: none;
}
